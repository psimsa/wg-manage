# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: GoTool@0
  inputs:
    version: '1.16'
    
- task: Go@0
  inputs:
    command: 'build'
    arguments: '-o $(Pipeline.Workspace)/out/windows/wg-manage.exe'
  env:
    GOOS: windows
  name: BuildWindows
  displayName: 'Build Windows'

- task: Go@0
  inputs:
    command: 'build'
    arguments: '-o $(Pipeline.Workspace)/out/linux-amd64/wg-manage'
  env:
    GOOS: linux
    GOARCH: amd64
  name: BuildLinuxAmd64
  displayName: 'Build Linux amd64'
  
- task: Go@0
  inputs:
    command: 'build'
    arguments: '-o $(Pipeline.Workspace)/out/linux-arm64/wg-manage'
  env:
    GOOS: linux
    GOARCH: arm64
  name: BuildLinuxArm64
  displayName: 'Build Linux arm64'
  
- task: Go@0
  inputs:
    command: 'build'
    arguments: '-o $(Pipeline.Workspace)/out/darwin/wg-manage'
  env:
    GOOS: darwin
  name: BuildDarwin
  displayName: 'Build Darwin'
  
- task: PublishPipelineArtifact@1.199.0
  inputs:
    targetPath: '$(Pipeline.Workspace)/out/windows'
    artifact: 'wg-manage-windows'
    publishLocation: 'pipeline'

  
- task: PublishPipelineArtifact@1.199.0
  inputs:
    targetPath: '$(Pipeline.Workspace)/out/linux-amd64'
    artifact: 'wg-manage-linux-amd64'
    publishLocation: 'pipeline'

  
- task: PublishPipelineArtifact@1.199.0
  inputs:
    targetPath: '$(Pipeline.Workspace)/out/linux-arm64'
    artifact: 'wg-manage-linux-arm64'
    publishLocation: 'pipeline'
  
- task: PublishPipelineArtifact@1.199.0
  inputs:
    targetPath: '$(Pipeline.Workspace)/out/darwin'
    artifact: 'wg-manage-darwin'
    publishLocation: 'pipeline'
  